#!/usr/bin/env python3
-- coding: utf-8 --
"""
Full tutorial on calibrating Denoisers Using J-Invariance

In this example, we show how to find an optimally calibrated
version of any denoising algorithm.

The calibration method is based on the noise2self algorithm of [1]_.

.. [1] J. Batson & L. Royer. Noise2Self: Blind Denoising by Self-Supervision,
International Conference on Machine Learning, p. 524-533 (2019).

.. seealso::
A simple example of the method is given in
:ref:sphx_glr_auto_examples_filters_plot_j_invariant.py.
"""

#####################################################################
Calibrating a wavelet denoiser

import numpy as np
from matplotlib import pyplot as plt
from matplotlib import gridspec
import cv2
from skimage.data import chelsea, hubble_deep_field
from skimage.metrics import mean_squared_error as mse
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.restoration import (calibrate_denoiser,
denoise_wavelet,
denoise_tv_chambolle, denoise_nl_means,
estimate_sigma)
from skimage.util import img_as_float, random_noise
from skimage.color import rgb2gray
from functools import partial

_denoise_wavelet = partial(denoise_wavelet, rescale_sigma=True)

#image = img_as_float(chelsea())
from PIL import Image

image = Image.open('/home/venkat/Data Set/img1.png')

#image= image.convert('L')

image=img_as_float(image)

sigma = 0.3
noisy = random_noise(image, var=sigma ** 2)
Parameters to test when calibrating the denoising algorithm

parameter_ranges = {'sigma': np.arange(0.1, 0.3, 0.02),
'wavelet': ['db1', 'db2'],
'convert2ycbcr': [True, False],
'channel_axis': [-1]}
Denoised image using default parameters of denoise_wavelet

default_output = denoise_wavelet(noisy, channel_axis=-1, rescale_sigma=True)
Calibrate denoiser

calibrated_denoiser = calibrate_denoiser(noisy,
_denoise_wavelet,
denoise_parameters=parameter_ranges
)
Denoised image using calibrated denoiser

calibrated_output = calibrated_denoiser(noisy)

fig, axes = plt.subplots(1, 3, sharex=True, sharey=True, figsize=(15, 5))

for ax, img, title in zip(axes,
[noisy, default_output, calibrated_output],
['Noisy Image', 'Denoised (Default)',
'Denoised (Calibrated)']):
ax.imshow(img)
ax.set_title(title)
ax.set_yticks([])
ax.set_xticks([])

#%%The Self-Supervised Loss and J-InvarianceÂ¶

from skimage.restoration.j_invariant import _invariant_denoise

sigma_range = np.arange(sigma/2, 1.5*sigma, 0.025)

parameters_tested = [{'sigma': sigma, 'convert2ycbcr': True, 'wavelet': 'db2',
'channel_axis': -1}
for sigma in sigma_range]

denoised_invariant = [_invariant_denoise(noisy, _denoise_wavelet,
denoiser_kwargs=params)
for params in parameters_tested]

self_supervised_loss = [mse(img, noisy) for img in denoised_invariant]
ground_truth_loss = [mse(img, image) for img in denoised_invariant]

opt_idx = np.argmin(self_supervised_loss)
plot_idx = [0, opt_idx, len(sigma_range) - 1]

get_inset = lambda x: x[25:225, 100:300]

plt.figure(figsize=(10, 12))

gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :])
ax_image = [plt.subplot(gs[2, i]) for i in range(3)]

ax1.plot(sigma_range, self_supervised_loss, color='C0',
label='Self-Supervised Loss')
ax1.scatter(sigma_range[opt_idx], self_supervised_loss[opt_idx] + 0.0003,
marker='v', color='red', label='optimal sigma')

ax1.set_ylabel('MSE')
ax1.set_xticks([])
ax1.legend()
ax1.set_title('Self-Supervised Loss')

ax2.plot(sigma_range, ground_truth_loss, color='C0', linestyle='--',
label='Ground Truth Loss')
ax2.scatter(sigma_range[opt_idx], ground_truth_loss[opt_idx] + 0.0003,
marker='v', color='red', label='optimal sigma')
ax2.set_ylabel('MSE')
ax2.legend()
ax2.set_xlabel('sigma')
ax2.set_title('Ground-Truth Loss')

for i in range(3):
ax = ax_image[i]
ax.set_xticks([])
ax.set_yticks([])
ax.imshow(get_inset(denoised_invariant[plot_idx[i]]))
ax.set_xlabel('sigma = ' + str(np.round(sigma_range[plot_idx[i]], 2)))

for spine in ax_image[1].spines.values():
spine.set_edgecolor('red')
spine.set_linewidth(5)
#%%   Comparing Different Classes of Denoiser
from PIL import Image

image = Image.open('/home/venkat/Data Set/img1.png')

image= image.convert('L')

image=img_as_float(image)

sigma = 0.1

np.random.seed(0)

gauss=np.random.normal(0,sigma, image.shape)

image=image+gauss
#noisy = random_noise(image, mode='speckle', var=sigma ** 2)

parameter_ranges_tv = {'weight': np.arange(0.01, 0.3, 0.01)}
_, (parameters_tested_tv, losses_tv) = calibrate_denoiser(
noisy,
denoise_tv_chambolle,
denoise_parameters=parameter_ranges_tv,
extra_output=True)
print(f'Minimum self-supervised loss TV: {np.min(losses_tv):.4f}')

best_parameters_tv = parameters_tested_tv[np.argmin(losses_tv)]
denoised_calibrated_tv = _invariant_denoise(noisy, denoise_tv_chambolle,
denoiser_kwargs=best_parameters_tv)
denoised_default_tv = denoise_tv_chambolle(noisy, **best_parameters_tv)

denoised_calibrated_tv =rgb2gray(denoised_default_tv)

denoised_default_tv=rgb2gray(denoised_default_tv)

psnr_calibrated_tv = psnr(image, denoised_calibrated_tv)
psnr_default_tv = psnr(image, denoised_default_tv)

ssim_calibrated_tv =ssim(image, denoised_calibrated_tv)
ssim_default_tv=ssim(image, denoised_default_tv)

mse_calibrated_tv=mse(image, denoised_calibrated_tv)
mse_default_tv=mse(image, denoised_default_tv)

parameter_ranges_wavelet = {'sigma': np.arange(0.01, 0.3, 0.03)}
_, (parameters_tested_wavelet, losses_wavelet) = calibrate_denoiser(
noisy,
_denoise_wavelet,
parameter_ranges_wavelet,
extra_output=True)
print(f'Minimum self-supervised loss wavelet: {np.min(losses_wavelet):.4f}')

best_parameters_wavelet = parameters_tested_wavelet[np.argmin(losses_wavelet)]
denoised_calibrated_wavelet = _invariant_denoise(
noisy, _denoise_wavelet,
denoiser_kwargs=best_parameters_wavelet)
denoised_default_wavelet = _denoise_wavelet(noisy, **best_parameters_wavelet)

denoised_calibrated_wavelet=rgb2gray(denoised_calibrated_wavelet)
denoised_default_wavelet=rgb2gray(denoised_default_wavelet)

psnr_calibrated_wavelet = psnr(image, denoised_calibrated_wavelet)
psnr_default_wavelet = psnr(image, denoised_default_wavelet)

ssim_calibrated_wavelet = ssim(image, denoised_calibrated_wavelet)
ssim_default_wavelet = ssim(image, denoised_default_wavelet)

mse_calibrated_wavelet = mse(image, denoised_calibrated_wavelet)
mse_default_wavelet = mse(image, denoised_default_wavelet)

sigma_est = estimate_sigma(noisy)

parameter_ranges_nl = {'sigma': np.arange(0.01, 0.3, 0.03) * sigma_est,
'h': np.arange(0.1, 0.6, 0.1) * sigma_est}

parameter_ranges_nl = {'sigma': np.arange(0.01, 0.3, 0.03)}
_, (parameters_tested_nl, losses_nl) = calibrate_denoiser(noisy,
denoise_nl_means,
parameter_ranges_nl,
extra_output=True)
print(f'Minimum self-supervised loss NL means: {np.min(losses_nl):.4f}')

best_parameters_nl = parameters_tested_nl[np.argmin(losses_nl)]
denoised_calibrated_nl = _invariant_denoise(noisy, denoise_nl_means,
denoiser_kwargs=best_parameters_nl)
denoised_default_nl = denoise_nl_means(noisy, **best_parameters_nl)

denoised_default_nl=rgb2gray(denoised_default_nl)

denoised_calibrated_nl=rgb2gray(denoised_calibrated_nl)

psnr_calibrated_nl = psnr(image, denoised_calibrated_nl)
psnr_default_nl = psnr(image, denoised_default_nl)

ssim_calibrated_nl = ssim(image, denoised_calibrated_nl)
ssim_default_nl = ssim(image, denoised_default_nl)

mse_calibrated_nl = mse(image, denoised_calibrated_nl)
mse_default_nl = mse(image, denoised_default_nl)

print(f'                       PSNR')
print(f'NL means (Default)   : {psnr_default_nl:.1f}')
print(f'NL means (Calibrated): {psnr_calibrated_nl:.1f}')
print(f'Wavelet  (Default)   : {psnr_default_wavelet:.1f}')
print(f'Wavelet  (Calibrated): {psnr_calibrated_wavelet:.1f}')
print(f'TV norm  (Default)   : {psnr_default_tv:.1f}')
print(f'TV norm  (Calibrated): {psnr_calibrated_tv:.1f}')

print(f'                       SSIM')
print(f'NL means (Default)   : {ssim_default_nl:.1f}')
print(f'NL means (Calibrated): {ssim_calibrated_nl:.1f}')
print(f'Wavelet  (Default)   : {ssim_default_wavelet:.1f}')
print(f'Wavelet  (Calibrated): {ssim_calibrated_wavelet:.1f}')
print(f'TV norm  (Default)   : {ssim_default_tv:.1f}')
print(f'TV norm  (Calibrated): {ssim_calibrated_tv:.1f}')

print(f'                       MSE')
print(f'NL means (Default)   : {mse_default_nl:.1f}')
print(f'NL means (Calibrated): {mse_calibrated_nl:.1f}')
print(f'Wavelet  (Default)   : {mse_default_wavelet:.1f}')
print(f'Wavelet  (Calibrated): {mse_calibrated_wavelet:.1f}')
print(f'TV norm  (Default)   : {mse_default_tv:.1f}')
print(f'TV norm  (Calibrated): {mse_calibrated_tv:.1f}')

plt.subplots(figsize=(10, 12))
plt.imshow(noisy, cmap='Greys_r')
plt.xticks([])
plt.yticks([])
plt.title('Noisy Image')

get_inset = lambda x: x[0:100, -140:]

fig, axes = plt.subplots(ncols=3, nrows=2, figsize=(15, 8))

for ax in axes.ravel():
ax.set_xticks([])
ax.set_yticks([])

axes[0, 0].imshow(get_inset(denoised_default_nl), cmap='Greys_r')
axes[0, 0].set_title('NL Means Default')
axes[1, 0].imshow(get_inset(denoised_calibrated_nl), cmap='Greys_r')
axes[1, 0].set_title('NL Means Calibrated')
axes[0, 1].imshow(get_inset(denoised_default_wavelet), cmap='Greys_r')
axes[0, 1].set_title('Wavelet Default')
axes[1, 1].imshow(get_inset(denoised_calibrated_wavelet), cmap='Greys_r')
axes[1, 1].set_title('Wavelet Calibrated')
axes[0, 2].imshow(get_inset(denoised_default_tv), cmap='Greys_r')
axes[0, 2].set_title('TV Norm Default')
axes[1, 2].imshow(get_inset(denoised_calibrated_tv), cmap='Greys_r')
axes[1, 2].set_title('TV Norm Calibrated')

for spine in axes[1, 2].spines.values():
spine.set_edgecolor('red')
spine.set_linewidth(5)

plt.show()
