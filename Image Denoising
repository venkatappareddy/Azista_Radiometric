#!/usr/bin/env python3
-- coding: utf-8 --

"""
Created on Thu Sep  1 10:31:00 2022

@author: venkat
"""

#!/usr/bin/env python3
-- coding: utf-8 --
"""
Full tutorial on calibrating Denoisers Using J-Invariance

In this example, we show how to find an optimally calibrated
version of any denoising algorithm.

The calibration method is based on the noise2self algorithm of [1]_.

.. [1] J. Batson & L. Royer. Noise2Self: Blind Denoising by Self-Supervision,
International Conference on Machine Learning, p. 524-533 (2019).

.. seealso::
A simple example of the method is given in
:ref:sphx_glr_auto_examples_filters_plot_j_invariant.py.
"""

#####################################################################
Calibrating a wavelet denoiser

"""
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import gridspec
import cv2
from skimage.data import chelsea, hubble_deep_field
from skimage.metrics import mean_squared_error as mse
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.restoration import (calibrate_denoiser,
denoise_wavelet,
denoise_tv_chambolle, denoise_nl_means,
estimate_sigma)
from skimage.util import img_as_float, random_noise
from skimage.color import rgb2gray
from functools import partial

_denoise_wavelet = partial(denoise_wavelet, rescale_sigma=True)

#image = img_as_float(chelsea())
from PIL import Image

image = Image.open('/home/venkat/Data Set/img1.png')

#image= image.convert('L')

image=img_as_float(image)

sigma = 0.3

noisy = random_noise(image, var=sigma ** 2)
Parameters to test when calibrating the denoising algorithm

parameter_ranges = {'sigma': np.arange(0.1, 0.3, 0.02),
'wavelet': ['db1', 'db2'],
'convert2ycbcr': [True, False],
'channel_axis': [-1]}
Denoised image using default parameters of denoise_wavelet

default_output = denoise_wavelet(noisy, channel_axis=-1, rescale_sigma=True)
Calibrate denoiser

calibrated_denoiser = calibrate_denoiser(noisy,
_denoise_wavelet,
denoise_parameters=parameter_ranges
)
Denoised image using calibrated denoiser

calibrated_output = calibrated_denoiser(noisy)

fig, axes = plt.subplots(1, 3, sharex=True, sharey=True, figsize=(15, 5))

for ax, img, title in zip(axes,
[noisy, default_output, calibrated_output],
['Noisy Image', 'Denoised (Default)',
'Denoised (Calibrated)']):
ax.imshow(img)
ax.set_title(title)
ax.set_yticks([])
ax.set_xticks([])

#%%The Self-Supervised Loss and J-InvarianceÂ¶

from skimage.restoration.j_invariant import _invariant_denoise

sigma_range = np.arange(sigma/2, 1.5*sigma, 0.025)

parameters_tested = [{'sigma': sigma, 'convert2ycbcr': True, 'wavelet': 'db2',
'channel_axis': -1}
for sigma in sigma_range]

denoised_invariant = [_invariant_denoise(noisy, _denoise_wavelet,
denoiser_kwargs=params)
for params in parameters_tested]

self_supervised_loss = [mse(img, noisy) for img in denoised_invariant]
ground_truth_loss = [mse(img, image) for img in denoised_invariant]

opt_idx = np.argmin(self_supervised_loss)
plot_idx = [0, opt_idx, len(sigma_range) - 1]

get_inset = lambda x: x[25:225, 100:300]

plt.figure(figsize=(10, 12))

gs = gridspec.GridSpec(3, 3)
ax1 = plt.subplot(gs[0, :])
ax2 = plt.subplot(gs[1, :])
ax_image = [plt.subplot(gs[2, i]) for i in range(3)]

ax1.plot(sigma_range, self_supervised_loss, color='C0',
label='Self-Supervised Loss')
ax1.scatter(sigma_range[opt_idx], self_supervised_loss[opt_idx] + 0.0003,
marker='v', color='red', label='optimal sigma')

ax1.set_ylabel('MSE')
ax1.set_xticks([])
ax1.legend()
ax1.set_title('Self-Supervised Loss')

ax2.plot(sigma_range, ground_truth_loss, color='C0', linestyle='--',
label='Ground Truth Loss')
ax2.scatter(sigma_range[opt_idx], ground_truth_loss[opt_idx] + 0.0003,
marker='v', color='red', label='optimal sigma')
ax2.set_ylabel('MSE')
ax2.legend()
ax2.set_xlabel('sigma')
ax2.set_title('Ground-Truth Loss')

for i in range(3):
ax = ax_image[i]
ax.set_xticks([])
ax.set_yticks([])
ax.imshow(get_inset(denoised_invariant[plot_idx[i]]))
ax.set_xlabel('sigma = ' + str(np.round(sigma_range[plot_idx[i]], 2)))

for spine in ax_image[1].spines.values():
spine.set_edgecolor('red')
spine.set_linewidth(5)
#%%   Comparing Different Classes of Denoiser
from PIL import Image

image = Image.open('/home/venkat/Data Set/img2.png')

#image= image.convert('L')

image=img_as_float(image)

#image=rgb2gray(image)

sigma = 0.1

#rng = np.random.default_rng()
#gauss_noisy=img + 0.5 * img.std() * rng.standard_normal(img.shape)

#gauss=np.random.normal(0,sigma, image.shape)

#gauss_noisy=image+gauss
gauss_noisy = random_noise(image, mode='gaussian', seed=None, clip=True, mean=0, var=sigma ** 2)

parameter_ranges_tv = {'weight': np.arange(0.01, 0.3, 0.02)}
_, (parameters_tested_tv, losses_tv) = calibrate_denoiser(
gauss_noisy,
denoise_tv_chambolle,
denoise_parameters=parameter_ranges_tv,
extra_output=True)
print(f'Minimum self-supervised loss TV: {np.min(losses_tv):.4f}')

best_parameters_tv = parameters_tested_tv[np.argmin(losses_tv)]
denoised_calibrated_tv = _invariant_denoise(gauss_noisy, denoise_tv_chambolle,
denoiser_kwargs=best_parameters_tv)
denoised_default_tv = denoise_tv_chambolle(gauss_noisy, **best_parameters_tv)

#denoised_calibrated_tv=rgb2gray(denoised_calibrated_tv)

psnr_calibrated_tv = psnr(image, denoised_calibrated_tv, data_range=image.min()-image.max())

#denoised_default_tv=rgb2gray(denoised_default_tv)

psnr_default_tv = psnr(image, denoised_default_tv, data_range=image.min()-image.max())

parameter_ranges_wavelet = {'sigma': np.arange(0.01, 0.3, 0.03)}
_, (parameters_tested_wavelet, losses_wavelet) = calibrate_denoiser(
gauss_noisy,
_denoise_wavelet,
parameter_ranges_wavelet,
extra_output=True)
print(f'Minimum self-supervised loss wavelet: {np.min(losses_wavelet):.4f}')

best_parameters_wavelet = parameters_tested_wavelet[np.argmin(losses_wavelet)]
denoised_calibrated_wavelet = _invariant_denoise(
gauss_noisy, _denoise_wavelet,
denoiser_kwargs=best_parameters_wavelet)
denoised_default_wavelet = _denoise_wavelet(gauss_noisy, **best_parameters_wavelet)

psnr_calibrated_wavelet = psnr(image, denoised_calibrated_wavelet, data_range=image.min()-image.max())
psnr_default_wavelet = psnr(image, denoised_default_wavelet, data_range=image.min()-image.max())

sigma_est = estimate_sigma(noisy)

parameter_ranges_nl = {'sigma': np.arange(0.6, 1.4, 0.2) * sigma_est,
'h': np.arange(0.6, 1.2, 0.2) * sigma_est}

parameter_ranges_nl = {'sigma': np.arange(0.01, 0.3, 0.03)}
_, (parameters_tested_nl, losses_nl) = calibrate_denoiser(gauss_noisy,
denoise_nl_means,
parameter_ranges_nl,
extra_output=True)
print(f'Minimum self-supervised loss NL means: {np.min(losses_nl):.4f}')

best_parameters_nl = parameters_tested_nl[np.argmin(losses_nl)]
denoised_calibrated_nl = _invariant_denoise(gauss_noisy, denoise_nl_means,
denoiser_kwargs=best_parameters_nl)
denoised_default_nl = denoise_nl_means(gauss_noisy, **best_parameters_nl)

psnr_calibrated_nl = psnr(image, denoised_calibrated_nl, data_range=image.min()-image.max())
psnr_default_nl = psnr(image, denoised_default_nl, data_range=image.min()-image.max())

print(f'                       PSNR')
print(f'NL means (Default)   : {psnr_default_nl:.1f}')
print(f'NL means (Calibrated): {psnr_calibrated_nl:.1f}')
print(f'Wavelet  (Default)   : {psnr_default_wavelet:.1f}')
print(f'Wavelet  (Calibrated): {psnr_calibrated_wavelet:.1f}')
print(f'TV norm  (Default)   : {psnr_default_tv:.1f}')
print(f'TV norm  (Calibrated): {psnr_calibrated_tv:.1f}')

plt.subplots(figsize=(10, 12))
plt.imshow(gauss_noisy)
plt.xticks([])
plt.yticks([])
plt.title('Noisy Image')

get_inset = lambda x: x[0:100, -140:]

fig, axes = plt.subplots(ncols=3, nrows=2, figsize=(15, 8))

for ax in axes.ravel():
ax.set_xticks([])
ax.set_yticks([])

axes[0, 0].imshow(get_inset(denoised_default_nl))
axes[0, 0].set_title('NL Means Default')
axes[1, 0].imshow(get_inset(denoised_calibrated_nl))
axes[1, 0].set_title('NL Means Calibrated')
axes[0, 1].imshow(get_inset(denoised_default_wavelet))
axes[0, 1].set_title('Wavelet Default')
axes[1, 1].imshow(get_inset(denoised_calibrated_wavelet))
axes[1, 1].set_title('Wavelet Calibrated')
axes[0, 2].imshow(get_inset(denoised_default_tv))
axes[0, 2].set_title('TV Norm Default')
axes[1, 2].imshow(get_inset(denoised_calibrated_tv))
axes[1, 2].set_title('TV Norm Calibrated')

for spine in axes[1, 2].spines.values():
spine.set_edgecolor('red')
spine.set_linewidth(5)

plt.show()"""
#%%
import cv2
import numpy as np
from matplotlib import pyplot as plt
from skimage import color, data
from skimage.restoration import (calibrate_denoiser,
denoise_wavelet,
denoise_tv_chambolle, denoise_nl_means,denoise_tv_bregman,
estimate_sigma)

from skimage.metrics import mean_squared_error as mse
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.util import img_as_float, random_noise
from skimage.color import rgb2gray
from functools import partial
from medpy.filter.smoothing import anisotropic_diffusion
_denoise_wavelet = partial(denoise_wavelet, rescale_sigma=True)
#%%
img=cv2.imread('/home/venkat/Data Set/img3.png')
img=img_as_float(img)
win_length=5
img=rgb2gray(img)
np.random.seed(0)
rng = np.random.default_rng()

imgblurred=cv2.GaussianBlur(img, (win_length,win_length), 0)
rand=random_noise(img, mode='gaussian', seed=None, clip=True, mean=0, var=.1)
#rand=1* img.std() * rng.standard_normal(img.shape)
noisy_img=rand+img
#%%
#denoised_img = denoise_tv_chambolle(noisy_img, weight=2)

#denoised_img=denoise_tv_chambolle(noisy_img, weight=1, eps=0.0002, max_num_iter=20, channel_axis=None)

#denoised_img=denoise_tv_bregman(noisy_img, weight=1, max_num_iter=200, eps=0.0001,channel_axis=None, multichannel=False)

"""sigma_est = np.mean(estimate_sigma(noisy_img, channel_axis=-1))  # Non local Mean
print(f'estimated noise standard deviation = {sigma_est}')

patch_kw = dict(patch_size=5,      # 5x5 patches
patch_distance=6,  # 13x13 search area
channel_axis=-1)
slow algorithm

denoised_img = denoise_nl_means(noisy_img, h=1.15 * sigma_est, fast_mode=False,
**patch_kw)"""
denoised_img=anisotropic_diffusion(noisy_img, niter=20, kappa=1, gamma=0.1, voxelspacing=None, option=2) #Ani-isotropic diffusion

#%%

psnr_tv=psnr(img, denoised_img)
print(psnr_tv)
ssim_tv=ssim(img, denoised_img)
print(ssim_tv)
mse_tv=mse(img, denoised_img)
print(mse_tv)
plt.subplot(1,3,1)
plt.imshow(img, cmap='gray')
plt.subplot(1,3,2)
plt.imshow(noisy_img, cmap='gray')
plt.subplot(1,3,3)
plt.imshow(denoised_img, cmap='gray')
plt.show()

#%%
